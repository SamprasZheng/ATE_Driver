import time

def f6212_init(ic_address = 0x00,Tool=None):
    tx_bytes = [
        [0x28,ic_address,0x06,0x00,0x00]
        [0x28,ic_address,0x0A,0x00,0x00]
        [0x28,ic_address,0x05,0x0B,0x30]
        [0x28,ic_address,0x64,0x00,0x00]
        [0x28,ic_address,0x09,0x00,0x00]
        [0x28,ic_address,0x07,0x00,0x00]
        [0x28,ic_address,0x20,0x6C,0xDB]
        [0x28,ic_address,0x21,0x2F,0xFF]
        [0x28,ic_address,0x23,0x00,0x00]
        [0x28,ic_address,0x24,0x6C,0xDB]
        [0x28,ic_address,0x25,0x2F,0xFF]
        [0x28,ic_address,0x27,0x00,0x00]
        [0x28,ic_address,0x28,0x6C,0xDB]
        [0x28,ic_address,0x29,0x2F,0xFF]
        [0x28,ic_address,0x2B,0x00,0x00]
        [0x28,ic_address,0x2C,0x6C,0xDB]
        [0x28,ic_address,0x2D,0x2F,0xFF]
        [0x28,ic_address,0x2F,0x00,0x00]
        [0x28,ic_address,0x30,0x6C,0xDB]
        [0x28,ic_address,0x31,0x2F,0xFF]
        [0x28,ic_address,0x33,0x00,0x00]
        [0x28,ic_address,0x34,0x6C,0xDB]
        [0x28,ic_address,0x35,0x2F,0xFF]
        [0x28,ic_address,0x37,0x00,0x00]
        [0x28,ic_address,0x38,0x6C,0xDB]
        [0x28,ic_address,0x39,0x2F,0xFF]
        [0x28,ic_address,0x3B,0x00,0x00]
        [0x28,ic_address,0x3C,0x6C,0xDB]
        [0x28,ic_address,0x3D,0x2F,0xFF]
        [0x28,ic_address,0x3F,0x00,0x00]
        [0x28,ic_address,0x40,0x6C,0xDB]
        [0x28,ic_address,0x41,0x2F,0xFF]
        [0x28,ic_address,0x43,0x00,0x00]
        [0x28,ic_address,0x44,0x6C,0xDB]
        [0x28,ic_address,0x45,0x2F,0xFF]
        [0x28,ic_address,0x47,0x00,0x00]
        [0x28,ic_address,0x48,0x6C,0xDB]
        [0x28,ic_address,0x49,0x2F,0xFF]
        [0x28,ic_address,0x4B,0x00,0x00]
        [0x28,ic_address,0x4C,0x6C,0xDB]
        [0x28,ic_address,0x4D,0x2F,0xFF]
        [0x28,ic_address,0x4F,0x00,0x00]
        [0x28,ic_address,0x50,0x6C,0xDB]
        [0x28,ic_address,0x51,0x2F,0xFF]
        [0x28,ic_address,0x53,0x00,0x00]
        [0x28,ic_address,0x54,0x6C,0xDB]
        [0x28,ic_address,0x55,0x2F,0xFF]
        [0x28,ic_address,0x57,0x00,0x00]
        [0x28,ic_address,0x58,0x6C,0xDB]
        [0x28,ic_address,0x59,0x2F,0xFF]
        [0x28,ic_address,0x5B,0x00,0x00]
        [0x28,ic_address,0x5C,0x6C,0xDB]
        [0x28,ic_address,0x5D,0x2F,0xFF]
        [0x28,ic_address,0x5F,0x00,0x00]
        [0x28,ic_address,0x01,0x0C,0x8A]
        [0x28,ic_address,0x00,0x00,0x00]
        [0x28,ic_address,0x69,0x00,0x1F]
        [0x28,ic_address,0x6A,0x00,0x7F]
        [0x28,ic_address,0x6B,0x00,0x1F]
        [0x28,ic_address,0x6C,0x00,0x1F]
        [0x28,ic_address,0x22,0x03,0xF8]
        [0x28,ic_address,0x2A,0x03,0xF8]
        [0x28,ic_address,0x32,0x03,0xF8]
        [0x28,ic_address,0x3A,0x03,0xF8]
        [0x28,ic_address,0x42,0x03,0xF8]
        [0x28,ic_address,0x4A,0x03,0xF8]
        [0x28,ic_address,0x52,0x03,0xF8]
        [0x28,ic_address,0x5A,0x03,0xF8]
        [0x28,ic_address,0x26,0x03,0xF8]
        [0x28,ic_address,0x2E,0x03,0xF8]
        [0x28,ic_address,0x36,0x03,0xF8]
        [0x28,ic_address,0x3E,0x03,0xF8]
        [0x28,ic_address,0x46,0x03,0xF8]
        [0x28,ic_address,0x4E,0x03,0xF8]
        [0x28,ic_address,0x56,0x03,0xF8]
        [0x28,ic_address,0x5E,0x03,0xF8]
    ]
    
    for tx_byte in tx_bytes:
#         print(tx_byte)
        Tool.SPI_program(device = ['SPI_0'], w_data = [[tx_byte, [0x00]*len(tx_byte), [0x00]*len(tx_byte), [0x00]*len(tx_byte)]], r_bytes = [0])

def f6212_G63_LNASWON_LNA1imax(ic_address = 0x00,Tool=None):
    tx_bytes = [
        [0x28,ic_address,0x00,0x00,0x00],
        [0x28,ic_address,0x06,0x00,0x00],
        [0x28,ic_address,0x0A,0x00,0x00],
        [0x28,ic_address,0x05,0x0B,0x30],
        [0x28,ic_address,0x64,0x00,0x00],
        [0x28,ic_address,0x01,0x0C,0x8A],
        [0x28,ic_address,0x09,0x00,0x00],
        [0x28,ic_address,0x07,0x00,0x00],
        [0x28,ic_address,0x0B,0x00,0x00],
        [0x28,ic_address,0x20,0x6C,0xDB],
        [0x28,ic_address,0x24,0x6C,0xDB],
        [0x28,ic_address,0x28,0x6C,0xDB],
        [0x28,ic_address,0x2C,0x6C,0xDB],
        [0x28,ic_address,0x30,0x6C,0xDB],
        [0x28,ic_address,0x34,0x6C,0xDB],
        [0x28,ic_address,0x38,0x6C,0xDB],
        [0x28,ic_address,0x3C,0x6C,0xDB],
        [0x28,ic_address,0x40,0x6C,0xDB],
        [0x28,ic_address,0x44,0x6C,0xDB],
        [0x28,ic_address,0x48,0x6C,0xDB],
        [0x28,ic_address,0x4C,0x6C,0xDB],
        [0x28,ic_address,0x50,0x6C,0xDB],
        [0x28,ic_address,0x54,0x6C,0xDB],
        [0x28,ic_address,0x58,0x6C,0xDB],
        [0x28,ic_address,0x5C,0x6C,0xDB],   
        [0x28,ic_address,0x21,0x2F,0xFF],   #CH1_CTRL
        [0x28,ic_address,0x25,0x2F,0xFF],
        [0x28,ic_address,0x29,0x2F,0xFF],
        [0x28,ic_address,0x2D,0x2F,0xFF],
        [0x28,ic_address,0x31,0x2F,0xFF],
        [0x28,ic_address,0x35,0x2F,0xFF],
        [0x28,ic_address,0x39,0x2F,0xFF],
        [0x28,ic_address,0x3D,0x2F,0xFF],
        [0x28,ic_address,0x41,0x2F,0xFF],
        [0x28,ic_address,0x45,0x2F,0xFF],
        [0x28,ic_address,0x49,0x2F,0xFF],
        [0x28,ic_address,0x4D,0x2F,0xFF],
        [0x28,ic_address,0x51,0x2F,0xFF],
        [0x28,ic_address,0x55,0x2F,0xFF],
        [0x28,ic_address,0x59,0x2F,0xFF],
        [0x28,ic_address,0x5D,0x2F,0xFF],
        [0x28,ic_address,0x22,0x03,0xF8],   #CH1_set
        [0x28,ic_address,0x26,0x03,0xF8],
        [0x28,ic_address,0x2A,0x03,0xF8],
        [0x28,ic_address,0x2E,0x03,0xF8],
        [0x28,ic_address,0x32,0x03,0xF8],
        [0x28,ic_address,0x36,0x03,0xF8],
        [0x28,ic_address,0x3A,0x03,0xF8],
        [0x28,ic_address,0x3E,0x03,0xF8],
        [0x28,ic_address,0x42,0x03,0xF8],
        [0x28,ic_address,0x46,0x03,0xF8],
        [0x28,ic_address,0x4A,0x03,0xF8],
        [0x28,ic_address,0x4E,0x03,0xF8],
        [0x28,ic_address,0x52,0x03,0xF8],
        [0x28,ic_address,0x56,0x03,0xF8],
        [0x28,ic_address,0x5A,0x03,0xF8],
        [0x28,ic_address,0x5E,0x03,0xF8],
        [0x28,ic_address,0x23,0x00,0x00],
        [0x28,ic_address,0x27,0x00,0x00],
        [0x28,ic_address,0x2B,0x00,0x00],
        [0x28,ic_address,0x2F,0x00,0x00],
        [0x28,ic_address,0x33,0x00,0x00],
        [0x28,ic_address,0x37,0x00,0x00],
        [0x28,ic_address,0x3B,0x00,0x00],
        [0x28,ic_address,0x3F,0x00,0x00],
        [0x28,ic_address,0x43,0x00,0x00],
        [0x28,ic_address,0x47,0x00,0x00],
        [0x28,ic_address,0x4B,0x00,0x00],
        [0x28,ic_address,0x4F,0x00,0x00],
        [0x28,ic_address,0x53,0x00,0x00],
        [0x28,ic_address,0x57,0x00,0x00],
        [0x28,ic_address,0x5B,0x00,0x00],
        [0x28,ic_address,0x5F,0x00,0x00],
        [0x28,ic_address,0x69,0x00,0x1F],
        [0x28,ic_address,0x6A,0x00,0x60],
        [0x28,ic_address,0x6B,0x00,0x00],
        [0x28,ic_address,0x6C,0x00,0x00],]
    
    for tx_byte in tx_bytes:
#         print(tx_byte)
        Tool.SPI_program(device = ['SPI_0'], w_data = [[tx_byte, [0x00]*len(tx_byte), [0x00]*len(tx_byte), [0x00]*len(tx_byte)]], r_bytes = [0])
def limit_range(target, max, min):
    if target > max:
        return max
    elif target < min:
        return min
    else:
        return target

def RX_ch_set(ic_address:int, channel:int, gain_code:int=0, gain:float=None, phase_code:int=0, phase:float=None, DA_bypass:bool=True, disable:bool=False, rf_load:bool=True, subchannel:int=1,Tool=None):
# channel from 1 to 8, subchannel: 1~2
    register_address = 0x16 + channel*8 + subchannel*4 # address from 0x22

    # gain phase decode
    if gain != None:
        gain_code = limit_range(int((gain+1.4)/0.45+0.5), 0, 63) # minimun gain = -1.4, step size = 0.45, max 27
    if phase != None:
        phase_code = int((phase%360)/5.6 + 0.5) # phase step size = 5.6
    # if gain_code != None and phase_code != None:
    tx_byte = [0x28 if rf_load else 0x20, ic_address, register_address, phase_code<<2|gain_code>>4, (gain_code&0x3)<<4|int(DA_bypass)<<3|int(disable)]
    Tool.SPI_program(device = ['SPI_0'], w_data = [[tx_byte, [0x00]*len(tx_byte), [0x00]*len(tx_byte), [0x00]*len(tx_byte)]], r_bytes = [0])
    print(gain_code, phase_code,tx_byte)
